{"version":3,"sources":["TimeSelect.tsx","PlaylistSelect.tsx","Alarms.tsx","theme/colors.ts","theme/shadows.ts","theme/theme.ts","Settings.tsx","ApiError.ts","DeviceSelect.tsx","TestPlayback.tsx","Spotify.tsx","HueGroupSelect.tsx","HueTest.tsx","Hue.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["useStyles","makeStyles","theme","root","width","display","gridTemplateAreas","gridTemplateColumns","gridGap","spacing","clearButton","fontSize","margin","useInputStyles","TimeSelect","value","onChange","className","useState","tempHour","setTempHour","classes","inputClasses","hour","minute","Box","clsx","TextField","select","label","ev","intVal","parseInt","target","fullWidth","InputProps","style","gridArea","Array","fill","map","_","hr","MenuItem","key","toString","finalHour","disabled","i","min","padStart","PlaylistSelect","props","useSWR","shouldRetryOnError","playlistData","data","isValidating","error","Typography","variant","playlists","playlist","uri","name","DAYS","timeSelect","dayHeading","textTransform","flex","useTabStyles","selected","fontWeight","tomorrow","Date","getDay","Alarms","alarms","tabClasses","activeDayIndex","setActiveDayIndex","changeHandler","day","newValue","toggleHandler","playlistChangeHandler","playlistUri","height","flexDirection","py","Tabs","_ev","val","index","Tab","toUpperCase","id","aria-controls","axis","onChangeIndex","containerStyle","slideStyle","alignItems","role","hidden","aria-labelledby","my","gutterBottom","Switch","checked","justifyContent","p","Button","onClick","c","length","white","black","blackRgb","bright","dark","medium","mediumRgb","trueBlack","trueBlackRgb","generateShadows","lightColorRgb","colors","darkColorRgb","idx","baseDarkPalette","type","text","primary","main","secondary","background","default","paper","baseLightPalette","createMuiTheme","palette","lightPalette","breakpoints","darkPalette","headingSettings","fontFamily","themeFactory","shadows","shape","typography","h1","h2","h3","h4","h5","h6","body1","body2","overrides","MuiAppBar","colorDefault","backgroundColor","MuiButton","MuiTypography","down","MuiTextField","color","MuiLink","underline","darkTheme","timeZones","Settings","timeAdjustment","onTimeAdjustmentChanged","isNaN","zone","ApiError","message","response","Error","DeviceSelect","deviceData","helperText","devices","device","TestPlayback","deviceId","React","setPlaylistUri","test","a","fetch","method","headers","body","JSON","stringify","ok","alert","status","stop","marginRight","Spotify","spotifySettings","onSpotifySettingsChanged","spotifyUserData","loadingSpotify","user","CheckCircleTwoTone","display_name","component","Link","href","HueGroupSelect","groupData","group","HueTest","on","Hue","hueSettings","onHueSettingsChanged","bridgeData","loadingBridge","connect","lightGroupId","groupId","paragraph","container","App","useSwr","settings","mutate","saving","setSaving","settingChangeHandler","settingKey","json","activeTab","setActiveTab","Container","Fade","in","position","top","left","right","transitionDelay","unmountOnExit","LinearProgress","v","icon","AlarmTwoTone","RadioTwoTone","EmojiObjectsTwoTone","SettingsTwoTone","spotify","hue","CircularProgress","marginTop","swrConfig","fetcher","then","res","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e6c0835b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  TextField,\n  MenuItem,\n  IconButton,\n  makeStyles,\n} from '@material-ui/core';\nimport { DeleteTwoTone, InsertInvitationOutlined } from '@material-ui/icons';\nimport clsx from 'clsx';\nimport { ChangeEvent } from 'react';\nimport { AlarmConfig } from './types';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    display: 'grid',\n    gridTemplateAreas: '\"hour minute\"',\n    gridTemplateColumns: '2fr 2fr',\n    gridGap: theme.spacing(1),\n  },\n  clearButton: {\n    fontSize: '8vmin',\n    margin: 'auto',\n  },\n}));\n\nconst useInputStyles = makeStyles((theme) => ({\n  root: {\n    fontSize: '10vmin',\n  },\n}));\n\ntype TimeSelectProps = {\n  value: Pick<AlarmConfig, 'hour' | 'minute'>;\n  onChange: (newValue: Pick<AlarmConfig, 'hour' | 'minute'>) => void;\n  className?: string;\n};\n\nexport function TimeSelect({ value, onChange, className }: TimeSelectProps) {\n  const [tempHour, setTempHour] = useState<number | null>(null);\n  const classes = useStyles({});\n  const inputClasses = useInputStyles({});\n\n  const hour = value && value.hour;\n  const minute = value && value.minute;\n\n  const handleHourChange = (ev: ChangeEvent<any>) => {\n    const intVal = parseInt(ev.target.value);\n    if (hour === intVal) return;\n    if (minute === null) {\n      setTempHour(intVal);\n    } else {\n      onChange({\n        hour: intVal,\n        minute,\n      });\n    }\n  };\n\n  const handleMinuteChange = (ev: ChangeEvent<any>) => {\n    const intVal = parseInt(ev.target.value);\n    const finalHour = hour ?? tempHour;\n    if (finalHour === null || minute === intVal) return;\n    onChange({\n      hour: finalHour,\n      minute: intVal,\n    });\n  };\n\n  return (\n    <Box className={clsx(classes.root, className)}>\n      <TextField\n        select\n        label=\"Hour\"\n        value={hour ?? tempHour}\n        onChange={handleHourChange}\n        fullWidth\n        InputProps={{\n          classes: inputClasses,\n        }}\n        style={{ gridArea: 'hour' }}\n      >\n        {new Array(24).fill(null).map((_, hr) => (\n          <MenuItem key={hr} value={hr.toString()}>\n            {hr}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        select\n        label=\"Min\"\n        value={minute}\n        onChange={handleMinuteChange}\n        fullWidth\n        InputProps={{\n          classes: inputClasses,\n        }}\n        style={{ gridArea: 'minute' }}\n        disabled={hour === null && tempHour === null}\n      >\n        {new Array(12)\n          .fill(null)\n          .map((_, i) => i * 5)\n          .map((min) => (\n            <MenuItem key={min} value={min.toString()}>\n              {min.toString().padStart(2, '0')}\n            </MenuItem>\n          ))}\n      </TextField>\n    </Box>\n  );\n}\n","import * as React from 'react';\nimport {\n  makeStyles,\n  Theme,\n  Typography,\n  TextField,\n  MenuItem,\n} from '@material-ui/core';\nimport useSWR from 'swr';\n\nexport type PlaylistSelectProps = {\n  value: string | null;\n  onChange: (newId: string | null) => void;\n};\n\nconst useStyles = makeStyles<Theme, PlaylistSelectProps>((theme) => ({}));\n\ntype PlaylistsResponse = {\n  playlists: {\n    id: string;\n    uri: string;\n    images: any[];\n    name: string;\n  }[];\n};\n\nexport function PlaylistSelect(props: PlaylistSelectProps) {\n  const classes = useStyles(props);\n  const { value, onChange } = props;\n\n  const { data: playlistData, isValidating, error: playlistError } = useSWR<\n    PlaylistsResponse\n  >('/api/spotify/playlists', {\n    shouldRetryOnError: false,\n  });\n\n  if (playlistError) {\n    return (\n      <Typography variant=\"caption\">\n        Connect Spotify to choose a playlist\n      </Typography>\n    );\n  }\n\n  return (\n    <TextField\n      label=\"Playlist\"\n      select\n      disabled={!playlistData || isValidating}\n      value={value || null}\n      onChange={(ev) => onChange(ev.target.value)}\n      fullWidth\n      margin=\"normal\"\n    >\n      {(playlistData?.playlists ?? []).map((playlist) => (\n        <MenuItem value={playlist.uri} key={playlist.uri}>\n          {playlist.name}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  Grid,\n  Box,\n  Typography,\n  makeStyles,\n  Tabs,\n  Tab,\n  Button,\n  IconButton,\n  Switch,\n} from '@material-ui/core';\nimport { TimeSelect } from './TimeSelect';\nimport SwipeableViews from 'react-swipeable-views';\nimport { AlarmConfig } from './types';\nimport { PlaylistSelect } from './PlaylistSelect';\nimport { DeleteTwoTone } from '@material-ui/icons';\n\nconst DAYS = [\n  'sunday',\n  'monday',\n  'tuesday',\n  'wednesday',\n  'thursday',\n  'friday',\n  'saturday',\n] as const;\n\nconst useStyles = makeStyles((theme) => ({\n  timeSelect: {},\n  dayHeading: {\n    textTransform: 'capitalize',\n    flex: 1,\n  },\n}));\n\nconst useTabStyles = makeStyles((theme) => ({\n  root: {},\n  selected: {\n    fontWeight: 'bold',\n  },\n}));\n\nconst tomorrow = (new Date().getDay() + 1) % 7;\n\ntype AlarmsProps = {\n  alarms: Record<string, AlarmConfig>;\n  onChange: (newValue: Record<string, AlarmConfig>) => void;\n};\n\nexport function Alarms({ alarms = {}, onChange }: AlarmsProps) {\n  const classes = useStyles({});\n  const tabClasses = useTabStyles({});\n\n  const [activeDayIndex, setActiveDayIndex] = useState(tomorrow);\n\n  const changeHandler = (day: string) => (newValue: {\n    hour: number | null;\n    minute: number | null;\n  }) => {\n    onChange({\n      ...alarms,\n      [day]: {\n        ...alarms[day],\n        ...newValue,\n        // auto enable on change\n        disabled: false,\n      },\n    });\n  };\n\n  const toggleHandler = (day: string) => () => {\n    onChange({\n      ...alarms,\n      [day]: {\n        ...alarms[day],\n        disabled: !alarms[day]?.disabled,\n      },\n    });\n  };\n\n  const playlistChangeHandler = (day: string) => (\n    playlistUri: string | null,\n  ) => {\n    onChange({\n      ...alarms,\n      [day]: {\n        ...alarms[day],\n        playlistUri,\n      },\n    });\n  };\n\n  return (\n    <Box\n      width=\"100%\"\n      height=\"100%\"\n      display=\"flex\"\n      flex={1}\n      flexDirection=\"column\"\n      py={2}\n    >\n      <Tabs\n        value={activeDayIndex}\n        onChange={(_ev, val) => setActiveDayIndex(val)}\n      >\n        {DAYS.map((day, index) => (\n          <Tab\n            label={day[0].toUpperCase()}\n            key={day}\n            id={`tab-${index}`}\n            aria-controls={`tabpanel-${index}`}\n            classes={tabClasses}\n          />\n        ))}\n      </Tabs>\n      <SwipeableViews\n        axis=\"x\"\n        index={activeDayIndex}\n        onChangeIndex={setActiveDayIndex}\n        style={{ flex: 1 }}\n        containerStyle={{\n          height: '100%',\n        }}\n        slideStyle={{\n          height: '100%',\n        }}\n      >\n        {DAYS.map((day, index) => (\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"flex-start\"\n            role=\"tabpanel\"\n            hidden={index !== activeDayIndex}\n            id={`tabpanel-${index}`}\n            aria-labelledby={`tab-${index}`}\n            key={day}\n            height=\"100%\"\n          >\n            {activeDayIndex === index && (\n              <>\n                <Box\n                  display=\"flex\"\n                  flexDirection=\"row\"\n                  alignItems=\"center\"\n                  my={1}\n                  width=\"100%\"\n                >\n                  <Typography\n                    variant=\"h5\"\n                    gutterBottom\n                    className={classes.dayHeading}\n                  >\n                    {day}\n                  </Typography>\n                  <Switch\n                    checked={!alarms[day]?.disabled}\n                    onChange={toggleHandler(day)}\n                    // wait until time selected before enabling\n                    disabled={\n                      alarms[day]?.hour === null || alarms[day]?.minute === null\n                    }\n                  />\n                </Box>\n                <Box flex={1} width=\"100%\">\n                  <TimeSelect\n                    value={alarms[day] || { hour: null, minute: null }}\n                    onChange={changeHandler(day)}\n                    className={classes.timeSelect}\n                  />\n                  <PlaylistSelect\n                    value={alarms[day]?.playlistUri ?? null}\n                    onChange={playlistChangeHandler(day)}\n                  />\n                </Box>\n              </>\n            )}\n          </Box>\n        ))}\n      </SwipeableViews>\n      <Box\n        display=\"flex\"\n        width=\"100%\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n        p={2}\n      >\n        <Button\n          onClick={() =>\n            setActiveDayIndex((c) => (c === 0 ? DAYS.length - 1 : c - 1))\n          }\n        >\n          Prev\n        </Button>\n        <Button onClick={() => setActiveDayIndex((c) => (c + 1) % DAYS.length)}>\n          Next\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n","export default {\n  white: '#fff',\n  black: '#222831',\n  blackRgb: [42, 36, 56],\n  bright: '#eeeeee',\n  dark: '#a0a0af',\n  medium: '#e0e0eb',\n  mediumRgb: [53, 47, 68],\n  trueBlack: '#111321',\n  trueBlackRgb: [4, 4, 8],\n};\n","import colors from './colors';\n\ntype Shadows = [\n  'none',\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n];\n\nexport const generateShadows = (\n  lightColorRgb: number[] = colors.mediumRgb,\n  darkColorRgb: number[] = colors.blackRgb,\n): Shadows =>\n  new Array(25).fill(null).map((_, idx) => {\n    if (idx === 0) return 'none';\n    return `0 ${idx * 5}px ${idx * 10}px rgba(${darkColorRgb[0]}, ${\n      darkColorRgb[1]\n    }, ${darkColorRgb[2]}, 0.025), 0 ${idx * 15}px ${idx * 40}px rgba(${\n      lightColorRgb[0]\n    }, ${lightColorRgb[1]}, ${lightColorRgb[2]}, 0.2)`;\n  }) as Shadows;\n","import { createMuiTheme } from '@material-ui/core';\nimport { ThemeOptions } from '@material-ui/core/styles/createMuiTheme';\nimport colors from './colors';\nimport { generateShadows } from './shadows';\n\nconst baseDarkPalette: ThemeOptions['palette'] = {\n  type: 'dark',\n  text: {\n    primary: colors.white,\n  },\n  primary: {\n    main: colors.bright,\n  },\n  secondary: {\n    main: colors.dark,\n  },\n  background: {\n    default: colors.black,\n    paper: colors.trueBlack,\n  },\n};\nconst baseLightPalette: ThemeOptions['palette'] = {\n  type: 'light',\n  text: {\n    primary: colors.black,\n  },\n  primary: {\n    main: colors.black,\n  },\n  secondary: {\n    main: colors.medium,\n  },\n  background: {\n    default: colors.bright,\n    paper: colors.white,\n  },\n};\n\nconst { palette: lightPalette, breakpoints } = createMuiTheme({\n  palette: baseLightPalette,\n});\nconst { palette: darkPalette } = createMuiTheme({ palette: baseDarkPalette });\n\nconst headingSettings = {\n  fontFamily: '\"EB Garamond\", serif',\n};\n\nconst themeFactory = (\n  palette: ThemeOptions['palette'],\n  shadows: ThemeOptions['shadows'],\n) =>\n  createMuiTheme({\n    palette,\n    shape: {},\n    shadows,\n    typography: {\n      fontFamily: 'Montserrat, sans-serif',\n      fontSize: 16,\n      h1: headingSettings,\n      h2: headingSettings,\n      h3: headingSettings,\n      h4: headingSettings,\n      h5: headingSettings,\n      h6: headingSettings,\n      body1: {\n        fontFamily: 'Montserrat, sans-serif',\n      },\n      body2: {\n        fontFamily: 'Montserrat, sans-serif',\n      },\n    },\n    overrides: {\n      MuiAppBar: {\n        colorDefault: {\n          backgroundColor: 'transparent',\n        },\n      },\n      MuiButton: {\n        root: {\n          textTransform: 'capitalize',\n        },\n      },\n      MuiTypography: {\n        h1: {\n          [breakpoints.down('sm')]: {\n            fontSize: '5vmax',\n          },\n        },\n        h2: {\n          [breakpoints.down('sm')]: {\n            fontSize: '4vmax',\n          },\n        },\n        h3: {\n          [breakpoints.down('sm')]: {\n            fontSize: '3.75vmax',\n          },\n        },\n        h4: {\n          [breakpoints.down('sm')]: {\n            fontSize: '3.3vmax',\n          },\n        },\n      },\n    },\n    props: {\n      MuiTextField: {\n        variant: 'outlined',\n      },\n      MuiButton: {\n        color: 'primary',\n      },\n      MuiLink: {\n        underline: 'always',\n      },\n    },\n  });\n\nexport const lightTheme = themeFactory(lightPalette, generateShadows());\nexport const darkTheme = themeFactory(\n  darkPalette,\n  generateShadows(colors.blackRgb, colors.trueBlackRgb),\n);\n","import * as React from 'react';\nimport { makeStyles, Theme, Box, TextField, MenuItem } from '@material-ui/core';\n\nexport type SettingsProps = {\n  timeAdjustment: { hour: number; minute: number };\n  onTimeAdjustmentChanged: (newValue: { hour: number; minute: number }) => void;\n};\n\nconst useStyles = makeStyles<Theme, SettingsProps>(() => ({}));\n\nconst timeZones = [\n  -11,\n  -10,\n  -9,\n  -8,\n  -7,\n  -6,\n  -5,\n  -4,\n  -3,\n  -2,\n  -1,\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n];\n\nexport function Settings(props: SettingsProps) {\n  const { timeAdjustment, onTimeAdjustmentChanged } = props;\n\n  const changeTimeZone = (ev: React.ChangeEvent<any>) => {\n    const intVal = parseInt(ev.target.value);\n    if (isNaN(intVal)) return;\n\n    onTimeAdjustmentChanged({\n      ...timeAdjustment,\n      hour: intVal,\n    });\n  };\n\n  return (\n    <Box py={2}>\n      <TextField\n        select\n        label=\"Time zone\"\n        value={timeAdjustment.hour.toString()}\n        onChange={changeTimeZone}\n        fullWidth\n        margin=\"normal\"\n      >\n        {timeZones.map((zone) => (\n          <MenuItem value={zone.toString()}>\n            UTC {zone === 0 ? '' : zone < 0 ? zone : `+${zone}`}\n          </MenuItem>\n        ))}\n      </TextField>\n    </Box>\n  );\n}\n","export class ApiError extends Error {\n  response: Response;\n\n  constructor(message: string, response: Response) {\n    super(message);\n    this.response = response;\n  }\n}\n","import * as React from 'react';\nimport {\n  makeStyles,\n  Theme,\n  Typography,\n  TextField,\n  MenuItem,\n} from '@material-ui/core';\nimport useSWR from 'swr';\n\nexport type DeviceSelectProps = {\n  value: string | null;\n  onChange: (newId: string | null) => void;\n};\n\nconst useStyles = makeStyles<Theme, DeviceSelectProps>((theme) => ({}));\n\ntype DevicesResponse = {\n  devices: {\n    id: string;\n    name: string;\n    is_active: boolean;\n    is_restricted: boolean;\n    type: string;\n  }[];\n};\n\nexport function DeviceSelect(props: DeviceSelectProps) {\n  const classes = useStyles(props);\n  const { value, onChange } = props;\n\n  const { data: deviceData, isValidating, error: deviceError } = useSWR<\n    DevicesResponse\n  >('/api/spotify/devices', {\n    shouldRetryOnError: false,\n  });\n\n  if (deviceError) {\n    return (\n      <Typography variant=\"caption\">\n        Connect Spotify to choose a device\n      </Typography>\n    );\n  }\n\n  return (\n    <TextField\n      label=\"Choose a device\"\n      helperText=\"Find the Spotify device name that we should play music on in the morning - probably this clock.\"\n      select\n      disabled={!deviceData || isValidating}\n      value={value || null}\n      onChange={(ev) => onChange(ev.target.value)}\n      fullWidth\n      margin=\"normal\"\n    >\n      {(deviceData?.devices ?? []).map((device) => (\n        <MenuItem value={device.id} key={device.id}>\n          {device.name}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n}\n","import * as React from 'react';\nimport { makeStyles, Theme, Box, Typography, Button } from '@material-ui/core';\nimport { PlaylistSelect } from './PlaylistSelect';\n\nexport type TestPlaybackProps = {\n  deviceId: string | null;\n};\n\nconst useStyles = makeStyles<Theme, TestPlaybackProps>((theme) => ({}));\n\nexport function TestPlayback(props: TestPlaybackProps) {\n  const classes = useStyles(props);\n  const { deviceId } = props;\n\n  const [playlistUri, setPlaylistUri] = React.useState<string | null>(null);\n\n  const test = async () => {\n    const response = await fetch('/api/spotify/testPlayback', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        playlistUri,\n        deviceId,\n      }),\n    });\n\n    if (!response.ok) {\n      alert('Playback failed: ' + response.status);\n    }\n  };\n\n  const stop = async () => {\n    const response = await fetch('/api/spotify/stopPlayback', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      alert('Stopping playback failed: ' + response.status);\n    }\n  };\n\n  return (\n    <Box my={2}>\n      <Typography variant=\"h6\">Test playback</Typography>\n      <Typography variant=\"caption\" gutterBottom>\n        Test the connection to Spotify by manually invoking the same procedure\n        we'll use to play music in the morning.\n      </Typography>\n      <PlaylistSelect value={playlistUri} onChange={setPlaylistUri} />\n      <Box display=\"flex\" flexDirection=\"row\">\n        <Button\n          variant=\"outlined\"\n          onClick={test}\n          disabled={!deviceId || !playlistUri}\n          style={{ marginRight: 8 }}\n        >\n          Test\n        </Button>\n        <Button variant=\"text\" onClick={stop}>\n          Stop\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n","import * as React from 'react';\nimport {\n  makeStyles,\n  Theme,\n  Box,\n  Button,\n  Link,\n  Typography,\n} from '@material-ui/core';\nimport useSWR from 'swr';\nimport { DeviceSelect } from './DeviceSelect';\nimport { TestPlayback } from './TestPlayback';\nimport { CheckCircleTwoTone } from '@material-ui/icons';\n\nexport type SpotifyProps = {\n  spotifySettings: {\n    deviceId: string | null;\n  };\n  onSpotifySettingsChanged: (newValue: { deviceId: string | null }) => void;\n};\n\nconst useStyles = makeStyles<Theme, SpotifyProps>(() => ({}));\n\nexport function Spotify(props: SpotifyProps) {\n  const { spotifySettings, onSpotifySettingsChanged } = props;\n\n  const { data: spotifyUserData, isValidating: loadingSpotify } = useSWR(\n    '/api/spotify/user',\n  );\n\n  const changeDevice = (deviceId: string | null) => {\n    onSpotifySettingsChanged({\n      deviceId,\n    });\n  };\n\n  return (\n    <Box py={2}>\n      {spotifyUserData?.user ? (\n        <Box my={2}>\n          <Typography variant=\"h4\" gutterBottom>\n            Spotify\n          </Typography>\n          <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n            <CheckCircleTwoTone style={{ marginRight: 8 }} />\n            <Typography color=\"primary\">\n              Connected to Spotify as {spotifyUserData.user.display_name}\n            </Typography>\n          </Box>\n          <DeviceSelect\n            value={spotifySettings?.deviceId ?? null}\n            onChange={changeDevice}\n          />\n          <TestPlayback deviceId={spotifySettings?.deviceId} />\n        </Box>\n      ) : (\n        <Button\n          variant=\"contained\"\n          component={Link as any}\n          underline=\"never\"\n          href=\"/spotifyLogin\"\n          disabled={loadingSpotify}\n        >\n          Connect Spotify\n        </Button>\n      )}\n    </Box>\n  );\n}\n","import * as React from 'react';\nimport {\n  makeStyles,\n  Theme,\n  Typography,\n  TextField,\n  MenuItem,\n} from '@material-ui/core';\nimport useSWR from 'swr';\n\nexport type HueGroupSelectProps = {\n  value: string | null;\n  onChange: (newId: string | null) => void;\n};\n\nconst useStyles = makeStyles<Theme, HueGroupSelectProps>((theme) => ({}));\n\ntype HueGroupsResponse = {\n  id: string;\n  name: string;\n  type:\n    | 'Lunimarie'\n    | 'Lightsource'\n    | 'LightGroup'\n    | 'Room'\n    | 'Entertainment'\n    | 'Zone';\n}[];\n\nexport function HueGroupSelect(props: HueGroupSelectProps) {\n  const classes = useStyles(props);\n  const { value, onChange } = props;\n\n  const { data: groupData, isValidating, error: deviceError } = useSWR<\n    HueGroupsResponse\n  >('/api/hue/groups', {\n    shouldRetryOnError: false,\n  });\n\n  if (deviceError) {\n    return (\n      <Typography variant=\"caption\">\n        Connect to Hue to choose a device\n      </Typography>\n    );\n  }\n\n  return (\n    <TextField\n      label=\"Choose a light group\"\n      select\n      disabled={!groupData || isValidating}\n      value={value || null}\n      onChange={(ev) => onChange(ev.target.value)}\n      fullWidth\n      margin=\"normal\"\n    >\n      {(groupData ?? []).map((group) => (\n        <MenuItem value={group.id} key={group.id}>\n          {group.name}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n}\n","import * as React from 'react';\nimport { Box, Button } from '@material-ui/core';\n\nexport type HueTestProps = {};\n\nexport function HueTest({}: HueTestProps) {\n  const test = async (on: boolean) => {\n    const response = await fetch('/api/hue/state', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        on,\n      }),\n    });\n\n    if (!response.ok) {\n      alert('Playback failed: ' + response.status);\n    }\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\">\n      <Button onClick={() => test(true)} style={{ marginRight: 8 }}>\n        Turn on\n      </Button>\n      <Button onClick={() => test(false)}>Turn off</Button>\n    </Box>\n  );\n}\n","import * as React from 'react';\nimport { Settings } from './types';\nimport { Box, Typography, Button } from '@material-ui/core';\nimport { HueGroupSelect } from './HueGroupSelect';\nimport useSWR from 'swr';\nimport { HueTest } from './HueTest';\n\nexport type HueProps = {\n  hueSettings: Settings['hue'];\n  onHueSettingsChanged: (val: Settings['hue']) => void;\n};\n\ntype BridgeResponse = {\n  name: string;\n};\n\nexport function Hue({ hueSettings, onHueSettingsChanged }: HueProps) {\n  const changeGroup = (groupId: string | null) => {\n    onHueSettingsChanged({\n      lightGroupId: groupId,\n    });\n  };\n\n  const { data: bridgeData, isValidating: loadingBridge } = useSWR<\n    BridgeResponse\n  >('/api/hue/bridge');\n\n  const connect = async () => {\n    const response = await fetch('/api/hue/connect', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      alert('Could not connect');\n    }\n  };\n\n  return (\n    <Box py={2}>\n      <Typography variant=\"h4\" gutterBottom>\n        Hue\n      </Typography>\n      {bridgeData ? (\n        <Box display=\"flex\" flexDirection=\"column\">\n          <HueGroupSelect\n            value={hueSettings?.lightGroupId}\n            onChange={changeGroup}\n          />\n          <Typography variant=\"body2\" paragraph>\n            Test Hue connection\n          </Typography>\n          <HueTest />\n        </Box>\n      ) : (\n        <Box display=\"flex\" flexDirection=\"column\">\n          <Typography paragraph>\n            Before connecting, press the button on your Hue bridge.\n          </Typography>\n          <Button\n            variant=\"contained\"\n            onClick={connect}\n            disabled={loadingBridge}\n          >\n            Connect Hue\n          </Button>\n        </Box>\n      )}\n    </Box>\n  );\n}\n","import React, { useState } from 'react';\nimport useSwr, { SWRConfig } from 'swr';\nimport { Alarms } from './Alarms';\nimport {\n  Container,\n  makeStyles,\n  Tabs,\n  Tab,\n  Box,\n  CircularProgress,\n  Typography,\n  ThemeProvider,\n  CssBaseline,\n  LinearProgress,\n  Fade,\n} from '@material-ui/core';\nimport {\n  AlarmTwoTone,\n  SettingsTwoTone,\n  RadioTwoTone,\n  EmojiObjectsTwoTone,\n} from '@material-ui/icons';\nimport { Settings } from './types';\nimport { darkTheme } from './theme/theme';\nimport { Settings as SettingsUI } from './Settings';\nimport { ApiError } from './ApiError';\nimport { Spotify } from './Spotify';\nimport { Hue } from './Hue';\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    flex: 1,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles({});\n  const { data: settings, mutate } = useSwr<Settings>('/api/settings');\n\n  const [saving, setSaving] = useState(false);\n\n  const settingChangeHandler = <T extends keyof Settings>(\n    settingKey: T,\n  ) => async (val: Settings[T]) => {\n    try {\n      setSaving(true);\n      const response = await fetch('/api/settings', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...settings,\n          [settingKey]: val,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Settings update failed');\n      }\n\n      const json = await response.json();\n      mutate(json);\n    } catch (err) {\n      alert(err.message);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const [activeTab, setActiveTab] = useState(0);\n\n  if (!settings) {\n    return (\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        p={4}\n      >\n        <CircularProgress />\n        <Typography variant=\"caption\" style={{ marginTop: 16 }}>\n          Connecting to clock\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Container className={classes.container}>\n      <Fade\n        in={saving}\n        style={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          right: 0,\n          transitionDelay: '800ms',\n        }}\n        unmountOnExit\n      >\n        <LinearProgress />\n      </Fade>\n      <Tabs\n        value={activeTab}\n        onChange={(_, v) => setActiveTab(v)}\n        variant=\"fullWidth\"\n      >\n        <Tab\n          icon={<AlarmTwoTone />}\n          label=\"Alarms\"\n          id=\"tab-alarms\"\n          aria-controls=\"tabpanel-alarms\"\n        />\n        <Tab\n          icon={<RadioTwoTone />}\n          label=\"Spotify\"\n          id=\"tab-spotify\"\n          aria-controls=\"tabpanel-spotify\"\n        />\n        <Tab\n          icon={<EmojiObjectsTwoTone />}\n          label=\"Hue\"\n          id=\"tab-hue\"\n          aria-controls=\"tabpanel-hue\"\n        />\n        <Tab\n          icon={<SettingsTwoTone />}\n          label=\"Settings\"\n          id=\"tab-settings\"\n          aria-controls=\"tabpanel-settings\"\n        />\n      </Tabs>\n      {activeTab === 0 && (\n        <Box\n          id={`tabpanel-alarms`}\n          role=\"tabpanel\"\n          aria-labelledby=\"tab-alarms\"\n          width=\"100%\"\n          flex={1}\n          display=\"flex\"\n          flexDirection=\"column\"\n        >\n          <Alarms\n            alarms={settings.alarms}\n            onChange={settingChangeHandler('alarms')}\n          />\n        </Box>\n      )}\n      {activeTab === 1 && (\n        <Box\n          id=\"tabpanel-spotify\"\n          role=\"tabpanel\"\n          aria-labelledby=\"tab-spotify\"\n          width=\"100%\"\n          flex={1}\n          display=\"flex\"\n          flexDirection=\"column\"\n        >\n          <Spotify\n            spotifySettings={settings.spotify}\n            onSpotifySettingsChanged={settingChangeHandler('spotify')}\n          />\n        </Box>\n      )}\n      {activeTab === 2 && (\n        <Box\n          id=\"tabpanel-settings\"\n          role=\"tabpanel\"\n          aria-labelledby=\"tab-settings\"\n          width=\"100%\"\n          flex={1}\n          display=\"flex\"\n          flexDirection=\"column\"\n        >\n          <Hue\n            hueSettings={settings.hue}\n            onHueSettingsChanged={settingChangeHandler('hue')}\n          />\n        </Box>\n      )}\n      {activeTab === 3 && (\n        <Box\n          id=\"tabpanel-settings\"\n          role=\"tabpanel\"\n          aria-labelledby=\"tab-settings\"\n          width=\"100%\"\n          flex={1}\n          display=\"flex\"\n          flexDirection=\"column\"\n        >\n          <SettingsUI\n            timeAdjustment={settings.timeAdjustment}\n            onTimeAdjustmentChanged={settingChangeHandler('timeAdjustment')}\n          />\n        </Box>\n      )}\n    </Container>\n  );\n}\n\nconst swrConfig = {\n  fetcher: (...args: [any, any]) =>\n    fetch(...args).then((res) => {\n      if (!res.ok) {\n        const error = new ApiError('Request failed', res);\n        throw error;\n      }\n      return res.json();\n    }),\n};\n\nexport default function () {\n  return (\n    <SWRConfig value={swrConfig}>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n        <CssBaseline />\n      </ThemeProvider>\n    </SWRConfig>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}