{"version":3,"sources":["TimeSelect.tsx","Alarms.tsx","theme/colors.ts","theme/shadows.ts","theme/theme.ts","Settings.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["useStyles","makeStyles","theme","root","width","display","gridTemplateAreas","gridTemplateColumns","clearButton","fontSize","margin","useInputStyles","TimeSelect","value","onChange","className","classes","inputClasses","hour","minute","Box","clsx","TextField","select","variant","label","ev","parseInt","target","fullWidth","InputProps","style","gridArea","Array","fill","map","_","hr","MenuItem","key","toString","i","min","padStart","IconButton","onClick","DeleteTwoTone","DAYS","timeSelect","dayHeading","textTransform","useTabStyles","selected","fontWeight","tomorrow","Date","getDay","Alarms","alarms","tabClasses","useState","activeDayIndex","setActiveDayIndex","changeHandler","day","newValue","height","flexDirection","Tabs","_ev","val","index","Tab","toUpperCase","id","aria-controls","axis","onChangeIndex","flex","containerStyle","slideStyle","alignItems","role","hidden","aria-labelledby","Typography","gutterBottom","justifyContent","p","Button","c","length","white","black","blackRgb","bright","dark","medium","mediumRgb","trueBlack","trueBlackRgb","generateShadows","lightColorRgb","colors","darkColorRgb","idx","baseDarkPalette","type","text","primary","main","secondary","background","default","paper","baseLightPalette","createMuiTheme","palette","lightPalette","breakpoints","darkPalette","headingSettings","fontFamily","themeFactory","shadows","shape","typography","h1","h2","h3","h4","h5","body1","body2","overrides","MuiAppBar","colorDefault","backgroundColor","MuiButton","MuiTypography","down","props","MuiTextField","color","MuiLink","underline","darkTheme","timeZones","Settings","timeAdjustment","onTimeAdjustmentChanged","intVal","isNaN","zone","container","App","useSwr","settings","data","mutate","saving","setSaving","settingChangeHandler","settingKey","a","fetch","method","headers","body","JSON","stringify","response","ok","Error","json","alert","message","activeTab","setActiveTab","Container","Fade","in","position","top","left","right","transitionDelay","unmountOnExit","LinearProgress","v","icon","AlarmTwoTone","SettingsTwoTone","CircularProgress","marginTop","swrConfig","fetcher","then","res","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8bd51837.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Box,\n  TextField,\n  MenuItem,\n  IconButton,\n  makeStyles,\n} from '@material-ui/core';\nimport { DeleteTwoTone } from '@material-ui/icons';\nimport clsx from 'clsx';\nimport { ChangeEvent } from 'react';\nimport { AlarmConfig } from './types';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    display: 'grid',\n    gridTemplateAreas: '\"hour minute right\"',\n    gridTemplateColumns: '2fr 2fr 1fr',\n  },\n  clearButton: {\n    fontSize: '8vmin',\n    margin: 'auto',\n  },\n}));\n\nconst useInputStyles = makeStyles((theme) => ({\n  root: {\n    fontSize: '10vmin',\n  },\n}));\n\ntype TimeSelectProps = {\n  value: AlarmConfig;\n  onChange: (newValue: AlarmConfig) => void;\n  className?: string;\n};\n\nexport function TimeSelect({ value, onChange, className }: TimeSelectProps) {\n  const classes = useStyles({});\n  const inputClasses = useInputStyles({});\n\n  const hour = value && value.hour;\n  const minute = value && value.minute;\n\n  const handleHourChange = (ev: ChangeEvent<any>) => {\n    if (minute === null) return;\n    onChange({\n      hour: parseInt(ev.target.value),\n      minute,\n    });\n  };\n\n  const handleMinuteChange = (ev: ChangeEvent<any>) => {\n    if (hour === null) return;\n    onChange({\n      hour,\n      minute: parseInt(ev.target.value),\n    });\n  };\n\n  const clear = () => {\n    onChange(null);\n  };\n\n  return (\n    <Box className={clsx(classes.root, className)}>\n      <TextField\n        select\n        variant=\"filled\"\n        label=\"Hour\"\n        value={hour}\n        onChange={handleHourChange}\n        fullWidth\n        InputProps={{\n          classes: inputClasses,\n        }}\n        style={{ gridArea: 'hour' }}\n      >\n        {new Array(24).fill(null).map((_, hr) => (\n          <MenuItem key={hr} value={hr.toString()}>\n            {hr}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        select\n        variant=\"filled\"\n        label=\"Min\"\n        value={minute}\n        onChange={handleMinuteChange}\n        fullWidth\n        InputProps={{\n          classes: inputClasses,\n        }}\n        style={{ gridArea: 'minute' }}\n      >\n        {new Array(12)\n          .fill(null)\n          .map((_, i) => i * 5)\n          .map((min) => (\n            <MenuItem key={min} value={min.toString()}>\n              {min.toString().padStart(2, '0')}\n            </MenuItem>\n          ))}\n      </TextField>\n      {value && (\n        <IconButton\n          onClick={clear}\n          className={classes.clearButton}\n          style={{ gridArea: 'right' }}\n        >\n          <DeleteTwoTone fontSize=\"inherit\" />\n        </IconButton>\n      )}\n    </Box>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  Grid,\n  Box,\n  Typography,\n  makeStyles,\n  Tabs,\n  Tab,\n  Button,\n} from '@material-ui/core';\nimport { TimeSelect } from './TimeSelect';\nimport SwipeableViews from 'react-swipeable-views';\nimport { AlarmConfig } from './types';\n\nconst DAYS = [\n  'sunday',\n  'monday',\n  'tuesday',\n  'wednesday',\n  'thursday',\n  'friday',\n  'saturday',\n] as const;\n\nconst useStyles = makeStyles((theme) => ({\n  timeSelect: {},\n  dayHeading: {\n    textTransform: 'capitalize',\n  },\n}));\n\nconst useTabStyles = makeStyles((theme) => ({\n  root: {},\n  selected: {\n    fontWeight: 'bold',\n  },\n}));\n\nconst tomorrow = new Date().getDay() + 1;\n\ntype AlarmsProps = {\n  alarms: Record<string, AlarmConfig>;\n  onChange: (newValue: Record<string, AlarmConfig>) => void;\n};\n\nexport function Alarms({ alarms = {}, onChange }: AlarmsProps) {\n  const classes = useStyles({});\n  const tabClasses = useTabStyles({});\n\n  const [activeDayIndex, setActiveDayIndex] = useState(tomorrow);\n\n  const changeHandler = (day: string) => (newValue: AlarmConfig) => {\n    onChange({\n      ...alarms,\n      [day]: newValue,\n    });\n  };\n\n  return (\n    <Box width=\"100%\" height=\"100%\" display=\"flex\" flexDirection=\"column\">\n      <Tabs\n        value={activeDayIndex}\n        onChange={(_ev, val) => setActiveDayIndex(val)}\n      >\n        {DAYS.map((day, index) => (\n          <Tab\n            label={day[0].toUpperCase()}\n            key={day}\n            id={`tab-${index}`}\n            aria-controls={`tabpanel-${index}`}\n            classes={tabClasses}\n          />\n        ))}\n      </Tabs>\n      <SwipeableViews\n        axis=\"x\"\n        index={activeDayIndex}\n        onChangeIndex={setActiveDayIndex}\n        style={{ flex: 1 }}\n        containerStyle={{\n          height: '100%',\n        }}\n        slideStyle={{\n          height: '100%',\n        }}\n      >\n        {DAYS.map((day, index) => (\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"flex-start\"\n            role=\"tabpanel\"\n            hidden={index !== activeDayIndex}\n            id={`tabpanel-${index}`}\n            aria-labelledby={`tab-${index}`}\n            key={day}\n            height=\"100%\"\n          >\n            {activeDayIndex === index && (\n              <>\n                <Typography\n                  variant=\"h5\"\n                  gutterBottom\n                  className={classes.dayHeading}\n                >\n                  {day}\n                </Typography>\n                <Box flex={1} width=\"100%\">\n                  <TimeSelect\n                    value={alarms[day] || null}\n                    onChange={changeHandler(day)}\n                    className={classes.timeSelect}\n                  />\n                </Box>\n              </>\n            )}\n          </Box>\n        ))}\n      </SwipeableViews>\n      <Box\n        display=\"flex\"\n        width=\"100%\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n        p={2}\n      >\n        <Button\n          onClick={() =>\n            setActiveDayIndex((c) => (c === 0 ? DAYS.length - 1 : c - 1))\n          }\n        >\n          Prev\n        </Button>\n        <Button onClick={() => setActiveDayIndex((c) => (c + 1) % DAYS.length)}>\n          Next\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n","export default {\n  white: '#fff',\n  black: '#171515',\n  blackRgb: [42, 36, 56],\n  bright: '#E6E5E7',\n  dark: '#292528',\n  medium: '#3A3E3B',\n  mediumRgb: [53, 47, 68],\n  trueBlack: '#040408',\n  trueBlackRgb: [4, 4, 8],\n};\n","import colors from './colors';\n\ntype Shadows = [\n  'none',\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n];\n\nexport const generateShadows = (\n  lightColorRgb: number[] = colors.mediumRgb,\n  darkColorRgb: number[] = colors.blackRgb,\n): Shadows =>\n  new Array(25).fill(null).map((_, idx) => {\n    if (idx === 0) return 'none';\n    return `0 ${idx * 5}px ${idx * 10}px rgba(${darkColorRgb[0]}, ${\n      darkColorRgb[1]\n    }, ${darkColorRgb[2]}, 0.025), 0 ${idx * 15}px ${idx * 40}px rgba(${\n      lightColorRgb[0]\n    }, ${lightColorRgb[1]}, ${lightColorRgb[2]}, 0.2)`;\n  }) as Shadows;\n","import { createMuiTheme } from '@material-ui/core';\nimport { ThemeOptions } from '@material-ui/core/styles/createMuiTheme';\nimport colors from './colors';\nimport { generateShadows } from './shadows';\n\nconst baseDarkPalette: ThemeOptions['palette'] = {\n  type: 'dark',\n  text: {\n    primary: colors.white,\n  },\n  primary: {\n    main: colors.bright,\n  },\n  secondary: {\n    main: colors.dark,\n  },\n  background: {\n    default: colors.black,\n    paper: colors.dark,\n  },\n};\nconst baseLightPalette: ThemeOptions['palette'] = {\n  type: 'light',\n  text: {\n    primary: colors.black,\n  },\n  primary: {\n    main: colors.black,\n  },\n  secondary: {\n    main: colors.medium,\n  },\n  background: {\n    default: colors.bright,\n    paper: colors.white,\n  },\n};\n\nconst { palette: lightPalette, breakpoints } = createMuiTheme({\n  palette: baseLightPalette,\n});\nconst { palette: darkPalette } = createMuiTheme({ palette: baseDarkPalette });\n\nconst headingSettings = {\n  fontFamily: '\"EB Garamond\", serif',\n};\n\nconst themeFactory = (\n  palette: ThemeOptions['palette'],\n  shadows: ThemeOptions['shadows'],\n) =>\n  createMuiTheme({\n    palette,\n    shape: {},\n    shadows,\n    typography: {\n      fontFamily: 'Montserrat, sans-serif',\n      fontSize: 16,\n      h1: headingSettings,\n      h2: headingSettings,\n      h3: headingSettings,\n      h4: headingSettings,\n      h5: headingSettings,\n      body1: {\n        fontFamily: 'Montserrat, sans-serif',\n      },\n      body2: {\n        fontFamily: 'Montserrat, sans-serif',\n      },\n    },\n    overrides: {\n      MuiAppBar: {\n        colorDefault: {\n          backgroundColor: 'transparent',\n        },\n      },\n      MuiButton: {\n        root: {\n          textTransform: 'capitalize',\n        },\n      },\n      MuiTypography: {\n        h1: {\n          [breakpoints.down('sm')]: {\n            fontSize: '5vmax',\n          },\n        },\n        h2: {\n          [breakpoints.down('sm')]: {\n            fontSize: '4vmax',\n          },\n        },\n        h3: {\n          [breakpoints.down('sm')]: {\n            fontSize: '3.75vmax',\n          },\n        },\n        h4: {\n          [breakpoints.down('sm')]: {\n            fontSize: '3.3vmax',\n          },\n        },\n      },\n    },\n    props: {\n      MuiTextField: {\n        variant: 'outlined',\n      },\n      MuiButton: {\n        color: 'primary',\n      },\n      MuiLink: {\n        underline: 'always',\n      },\n    },\n  });\n\nexport const lightTheme = themeFactory(lightPalette, generateShadows());\nexport const darkTheme = themeFactory(\n  darkPalette,\n  generateShadows(colors.blackRgb, colors.trueBlackRgb),\n);\n","import * as React from 'react';\nimport { makeStyles, Theme, Box, TextField, MenuItem } from '@material-ui/core';\n\nexport type SettingsProps = {\n  timeAdjustment: { hour: number; minute: number };\n  onTimeAdjustmentChanged: (newValue: { hour: number; minute: number }) => void;\n};\n\nconst useStyles = makeStyles<Theme, SettingsProps>((theme) => ({}));\n\nconst timeZones = [\n  -11,\n  -10,\n  -9,\n  -8,\n  -7,\n  -6,\n  -5,\n  -4,\n  -3,\n  -2,\n  -1,\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n];\n\nexport function Settings(props: SettingsProps) {\n  const classes = useStyles(props);\n  const { timeAdjustment, onTimeAdjustmentChanged } = props;\n\n  const changeTimeZone = (ev: React.ChangeEvent<any>) => {\n    const intVal = parseInt(ev.target.value);\n    if (isNaN(intVal)) return;\n\n    onTimeAdjustmentChanged({\n      ...timeAdjustment,\n      hour: intVal,\n    });\n  };\n\n  return (\n    <Box>\n      <TextField\n        select\n        label=\"Time zone\"\n        value={timeAdjustment.hour.toString()}\n        onChange={changeTimeZone}\n        fullWidth\n        margin=\"normal\"\n      >\n        {timeZones.map((zone) => (\n          <MenuItem value={zone.toString()}>\n            UTC {zone === 0 ? '' : zone < 0 ? zone : `+${zone}`}\n          </MenuItem>\n        ))}\n      </TextField>\n    </Box>\n  );\n}\n","import React, { useState } from 'react';\nimport useSwr, { SWRConfig } from 'swr';\nimport { Alarms } from './Alarms';\nimport {\n  Container,\n  makeStyles,\n  Tabs,\n  Tab,\n  Box,\n  CircularProgress,\n  Typography,\n  ThemeProvider,\n  CssBaseline,\n  LinearProgress,\n  Fade,\n} from '@material-ui/core';\nimport { AlarmTwoTone, SettingsTwoTone } from '@material-ui/icons';\nimport { AlarmConfig, Settings } from './types';\nimport { darkTheme } from './theme/theme';\nimport { Settings as SettingsUI } from './Settings';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    height: '100%',\n  },\n}));\n\nfunction App() {\n  const classes = useStyles({});\n  const { data: settings, mutate } = useSwr<Settings>('/api/settings');\n\n  const [saving, setSaving] = useState(false);\n\n  const settingChangeHandler = <T extends keyof Settings>(\n    settingKey: T,\n  ) => async (val: Settings[T]) => {\n    try {\n      setSaving(true);\n      const response = await fetch('/api/settings', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...settings,\n          [settingKey]: val,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Settings update failed');\n      }\n\n      const json = await response.json();\n      mutate(json);\n    } catch (err) {\n      alert(err.message);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const [activeTab, setActiveTab] = useState(0);\n\n  if (!settings) {\n    return (\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        p={4}\n      >\n        <CircularProgress />\n        <Typography variant=\"caption\" style={{ marginTop: 16 }}>\n          Connecting to clock\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Container className={classes.container}>\n      <Fade\n        in={saving}\n        style={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          right: 0,\n          transitionDelay: '800ms',\n        }}\n        unmountOnExit\n      >\n        <LinearProgress />\n      </Fade>\n      <Tabs\n        value={activeTab}\n        onChange={(_, v) => setActiveTab(v)}\n        variant=\"fullWidth\"\n      >\n        <Tab\n          icon={<AlarmTwoTone />}\n          label=\"Alarms\"\n          id=\"tab-alarms\"\n          aria-controls=\"tabpanel-alarms\"\n        />\n        <Tab\n          icon={<SettingsTwoTone />}\n          label=\"Settings\"\n          id=\"tab-settings\"\n          aria-controls=\"tabpanel-settings\"\n        />\n      </Tabs>\n      <Box\n        id={`tabpanel-alarms`}\n        role=\"tabpanel\"\n        hidden={activeTab !== 0}\n        aria-labelledby=\"tab-alarms\"\n        width=\"100%\"\n        flex={1}\n      >\n        <Alarms\n          alarms={settings.alarms}\n          onChange={settingChangeHandler('alarms')}\n        />\n      </Box>\n      <Box\n        id=\"tabpanel-settings\"\n        role=\"tabpanel\"\n        hidden={activeTab !== 1}\n        aria-labelledby=\"tab-settings\"\n        width=\"100%\"\n        flex={1}\n      >\n        <SettingsUI\n          timeAdjustment={settings.timeAdjustment}\n          onTimeAdjustmentChanged={settingChangeHandler('timeAdjustment')}\n        />\n      </Box>\n    </Container>\n  );\n}\n\nconst swrConfig = {\n  fetcher: (...args: [any, any]) => fetch(...args).then((res) => res.json()),\n};\n\nexport default function () {\n  return (\n    <SWRConfig value={swrConfig}>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n        <CssBaseline />\n      </ThemeProvider>\n    </SWRConfig>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}